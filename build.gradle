plugins {
    id 'java'
    id 'maven'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'maven-publish'
}

group 'SuperiorSkyblock2-NashornEngine'
version = "1.0.2"

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        maven { url 'https://repo.bg-software.com/repository/api/' }
    }

    dependencies {
        compileOnly "com.bgsoftware:SuperiorSkyblockAPI:latest"
    }

    shadowJar {
        archiveFileName = "${project.name}.jar"
        destinationDirectory = file("../archive/")
    }

    build {
        dependsOn shadowJar
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.bg-software.com/repository/api/' }
    maven { url 'https://repo.bg-software.com/repository/nms/' }
}

dependencies {
    compileOnly "com.bgsoftware:SuperiorSkyblockAPI:latest"
    compileOnly "org.spigotmc:v1_8_R3-Taco:latest"
    implementation "org.openjdk.nashorn:nashorn-core:15.3"
}

jar {
    from {
        for (File file : new File("archive").listFiles()) {
            zipTree(file)
        }
    }
}

processResources {
    outputs.upToDateWhen {false}
    String versionNumber = System.getenv("BUILD_NUMBER") == null ? version : version + "-DEVb" + System.getenv("BUILD_NUMBER")
    eachFile { details ->
        if (details.name.contentEquals('plugin.yml')) {
            filter { String line ->
                line.replace('${project.version}', versionNumber)
            }
        }
    }
}

shadowJar {
    dependsOn(jar)

    if(System.getenv("BUILD_NUMBER") == null){
        archiveName = rootProject.name + ".jar"
    }
    else{
        archiveName = rootProject.name + "-b" + System.getenv("BUILD_NUMBER") + ".jar"
    }

    delete fileTree('./target/') {
        exclude archiveName
    }

    destinationDir = file("./target/")
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

clean {
    delete file('./archive/')
}

build {
    dependsOn shadowJar
    dependsOn clean
}

publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build
build.shouldRunAfter subprojects.build